/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package practica.teoria;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author camilo.sampedro
 */
public final class Interfaz extends javax.swing.JFrame {

    private JTextField[][] campos;
    private JLabel[] jlEstados;
    private JLabel rotuloSimbolos = new JLabel("Estados");
    private JLabel rotuloEsFinal = new JLabel("Aceptación");
    private JCheckBox[] jcEsFinal;
    private int numeroEstados, numeroSimbolos;
    private AutomataFinito automata;
    private boolean[] esFinal;
    private boolean tieneTransicionesLambda;

    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        setVisible(true);
        numeroEstados = 2;
        numeroSimbolos = 2;
        jtfEstados.setText(Integer.toString(numeroEstados));
        jtfSimbolos.setText(Integer.toString(numeroSimbolos));
        tieneTransicionesLambda = true;
        reescribirComponentes(tieneTransicionesLambda);
        rotuloSimbolos.setHorizontalAlignment(JLabel.CENTER);
        rotuloEsFinal.setHorizontalAlignment(JLabel.CENTER);
    }

    public Interfaz(AutomataFinito AF) {
        initComponents();
        numeroEstados = AF.getNumeroEstados();
        numeroSimbolos = AF.getNumeroSimbolos();
        jtfEstados.setText(Integer.toString(numeroEstados));
        jtfSimbolos.setText(Integer.toString(numeroSimbolos));
        automata = AF;
        tieneTransicionesLambda = false;
        reescribirComponentes(tieneTransicionesLambda);
        reemplazarTabla(AF);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlNumeroEstados = new javax.swing.JLabel();
        jlNumeroSimbolos = new javax.swing.JLabel();
        jtfEstados = new javax.swing.JTextField();
        jtfSimbolos = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        jpTabla = new javax.swing.JPanel();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        btnMinimizar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("AFMixer");
        setMinimumSize(new java.awt.Dimension(1, 1));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jlNumeroEstados.setText("Estados:");

        jlNumeroSimbolos.setText("Símbolos de entrada:");

        jtfEstados.setToolTipText("Entero");
        jtfEstados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfEstadosKeyTyped(evt);
            }
        });

        jtfSimbolos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfSimbolosKeyTyped(evt);
            }
        });

        scrollPane.setToolTipText("");

        jpTabla.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jpTabla.setMinimumSize(new java.awt.Dimension(2, 2));
        jpTabla.setName(""); // NOI18N
        jpTabla.setLayout(new java.awt.GridLayout(1, 0));
        scrollPane.setViewportView(jpTabla);

        menuArchivo.setText("Automata");

        btnMinimizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        btnMinimizar.setText("Convertir a determinístico mínimo");
        btnMinimizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinimizarActionPerformed(evt);
            }
        });
        menuArchivo.add(btnMinimizar);

        barraMenu.add(menuArchivo);

        setJMenuBar(barraMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlNumeroEstados, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jlNumeroSimbolos, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtfEstados, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jtfSimbolos))
                        .addGap(30, 98, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jtfEstados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jlNumeroEstados))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jlNumeroSimbolos))
                    .addComponent(jtfSimbolos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        jpTabla.setSize(this.getSize().width - 30, this.getSize().height - 130);
        //System.out.println(this.getSize());
    }//GEN-LAST:event_formComponentResized

    private void jtfEstadosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfEstadosKeyTyped
        // TODO add your handling code here:
        if ("".equals(jtfEstados.getText())) {
            numeroEstados = 1;
            this.setSize(this.getWidth(), 190);
            this.setMinimumSize(new Dimension(this.getWidth(), 190));
            actualizarComponentes(true);
            jtfEstados.setForeground(Color.black);
            jtfEstados.setToolTipText("Entero");
            return;
        }
        String entrada = jtfEstados.getText();
        try {
            numeroEstados = Integer.parseInt(entrada);
            this.setSize(this.getWidth(), 165 + numeroEstados * 25);
            this.setMinimumSize(new Dimension(this.getWidth(), 165 + numeroEstados * 25));
            actualizarComponentes(true);
            jtfEstados.setForeground(Color.black);
            jtfEstados.setToolTipText("Entero");
        } catch (NumberFormatException ex) {
            jtfEstados.setForeground(Color.red);
            jtfEstados.setToolTipText("Formato no válido");
        }
    }//GEN-LAST:event_jtfEstadosKeyTyped

    private void jtfSimbolosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfSimbolosKeyTyped
        // TODO add your handling code here:
        if ("".equals(jtfSimbolos.getText())) {
            numeroSimbolos = 1;
            this.setSize(278, this.getHeight());
            this.setMinimumSize(new Dimension(278, this.getHeight()));
            actualizarComponentes(true);
            jtfSimbolos.setForeground(Color.black);
            jtfSimbolos.setToolTipText("Entero");
            return;
        }
        String entrada = jtfSimbolos.getText();
        try {
            numeroSimbolos = Integer.parseInt(entrada);
            this.setSize(278 + numeroSimbolos * 60, this.getHeight());
            this.setMinimumSize(new Dimension(278 + numeroSimbolos * 60, this.getHeight()));
            actualizarComponentes(true);
            jtfSimbolos.setForeground(Color.black);
            jtfSimbolos.setToolTipText("Entero");
        } catch (NumberFormatException ex) {
            jtfSimbolos.setForeground(Color.red);
            jtfSimbolos.setToolTipText("Formato no válido");
        }
    }//GEN-LAST:event_jtfSimbolosKeyTyped

    private void btnMinimizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinimizarActionPerformed
        // TODO add your handling code here:
        leerAutomata();

        //Validar automata:
        if (!automata.esValido()) {
            System.err.println("Automata no válido");
            return;
        }

        AutomataFinito AFD = automata.AFMinimo();
        Interfaz nueva = new Interfaz(AFD);
        nueva.setVisible(true);
    }//GEN-LAST:event_btnMinimizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem btnMinimizar;
    private javax.swing.JLabel jlNumeroEstados;
    private javax.swing.JLabel jlNumeroSimbolos;
    private javax.swing.JPanel jpTabla;
    private javax.swing.JTextField jtfEstados;
    private javax.swing.JTextField jtfSimbolos;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables

    private void actualizarComponentes(boolean leyendo) {
        if (leyendo) {
            leerAutomata();
        }
        eliminarComponentes();
        reescribirComponentes(tieneTransicionesLambda);
        reescribirValores();
    }

    public void reemplazarTabla(AutomataFinito tabla) {
        numeroEstados = tabla.getNumeroEstados();
        numeroSimbolos = tabla.getNumeroSimbolos();
        automata = tabla;
        actualizarComponentes(false);
    }

    private void reescribirComponentes(boolean conTransicionesLambda) {
        campos = new JTextField[numeroEstados + 1][numeroSimbolos];
        jlEstados = new JLabel[numeroEstados];
        jcEsFinal = new JCheckBox[numeroEstados];
        jpTabla.setLayout(new GridLayout(numeroEstados + 1, numeroSimbolos + 1));
        jpTabla.add(rotuloSimbolos);
        jpTabla.add(rotuloEsFinal);
        int i, j;

        //Reescribir campos símbolos:
        for (j = 0; j < numeroSimbolos - 1; j++) {
            campos[0][j] = new JTextField(3);
            campos[0][j].setVisible(true);
            campos[0][j].setBackground(Color.LIGHT_GRAY);
            campos[0][j].setHorizontalAlignment(JTextField.CENTER);
            jpTabla.add(campos[0][j]);
        }

        if (conTransicionesLambda) {
            campos[0][j] = new JTextField("λ");
            campos[0][j].setEditable(false);
        } else {
            campos[0][j] = new JTextField(3);
            campos[0][j].setEditable(true);
        }
        campos[0][j].setVisible(true);
        campos[0][j].setBackground(Color.LIGHT_GRAY);
        campos[0][j].setHorizontalAlignment(JTextField.CENTER);
        jpTabla.add(campos[0][j]);

        //Reescribir campos transiciones y de finales:
        for (i = 0; i < numeroEstados; i++) {
            jlEstados[i] = new JLabel("s" + (i + 1));
            jlEstados[i].setHorizontalAlignment(JTextField.CENTER);
            jpTabla.add(jlEstados[i]);
            jcEsFinal[i] = new JCheckBox();
            jcEsFinal[i].setHorizontalAlignment(JCheckBox.CENTER);
            jpTabla.add(jcEsFinal[i]);
            for (j = 0; j < numeroSimbolos; j++) {
                campos[i + 1][j] = new JTextField(3);
                campos[i + 1][j].setHorizontalAlignment(JTextField.CENTER);
                jpTabla.add(campos[i + 1][j]);
            }
        }

        this.paintAll(this.getGraphics());
    }

    private void eliminarComponentes() {
        int i;
        for (i = 0; i < campos.length; i++) {
            for (int j = 0; j < campos[i].length; j++) {
                jpTabla.remove(campos[i][j]);
            }
        }
        for (i = 0; i < jlEstados.length; i++) {
            jpTabla.remove(jlEstados[i]);
        }
        for (i = 0; i < jcEsFinal.length; i++) {
            jpTabla.remove(jcEsFinal[i]);
        }
        jpTabla.remove(rotuloSimbolos);
        jpTabla.remove(rotuloEsFinal);
    }

    /**
     * Lee el automata de la interfaz gráfica.
     */
    private void leerAutomata() {
        String[][] transiciones;
        String[] simbolos;

        transiciones = new String[campos.length - 1][campos[0].length];
        simbolos = new String[campos[0].length];

        esFinal = new boolean[campos.length - 1];

        //Leer símbolos:
        for (int i = 0; i < campos[0].length; i++) {
            if (!campos[0][i].getText().equals("λ")) {
                simbolos[i] = campos[0][i].getText();
            }
        }

        //Leer datos:
        for (int i = 1; i < campos.length; i++) {
            //transiciones[i - 1][0] = Integer.toString(i);
            for (int j = 0; j < campos[i].length; j++) {
                transiciones[i - 1][j] = campos[i][j].getText();
            }
        }

        //Verificar finales:
        for (int i = 0; i < campos.length - 1; i++) {
            esFinal[i] = jcEsFinal[i].isSelected();
        }

        automata = new AutomataFinito(esFinal, transiciones, simbolos);

        //mostrarPorConsola();
    }

    private void mostrarPorConsola() {
        System.out.println("\nMATRIZ:");
        String[][] transiciones = automata.getTransiciones();
        String[] simbolos = automata.getSimbolos();

        //Mostrar símbolos:
        System.out.print("[Símbolos]");
        for (int i = 0; i < simbolos.length; i++) {
            System.out.print("[" + simbolos[i] + "]");
        }
        System.out.println();

        //Mostrar transiciones:
        for (int i = 0; i < transiciones.length; i++) {
            System.out.print("[" + esFinal[i] + "]");
            for (int j = 0; j < transiciones[i].length; j++) {
                System.out.print("[" + transiciones[i][j] + "]");
            }
            System.out.print("\n");
        }
    }

    private void reescribirValores() {
        int m1, n1, m2, n2, i, j;
        m1 = campos.length;
        m2 = automata.getNumeroEstados();
        n1 = campos[0].length;
        n2 = automata.getNumeroSimbolos();
        String[][] transiciones = automata.getTransiciones();

        //Se escriben los símbolos de entrada:
        i = 0;
        while (i < n1 && i < n2) {
            campos[0][i].setText(automata.getSimbolos()[i]);
            i = i + 1;
        }

        //Por cada fila:
        i = 1;
        while (i < m1 && i <= m2) {
            j = 0;

            //Se inserta el valor de si es final.
            jcEsFinal[i - 1].setSelected(automata.getEsFinal()[i - 1]);

            //Se insertan transiciones.
            while (j < n1 && j < n2) {
                campos[i][j].setText(transiciones[i - 1][j]);
                j = j + 1;
            }
            i = i + 1;
        }

        //Reescribir componentes:
        this.paintAll(this.getGraphics());
    }
}
